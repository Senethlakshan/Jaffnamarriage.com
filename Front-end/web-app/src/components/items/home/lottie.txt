import React from 'react';
import LottieAnimation from 'lottie-react';
import animationData from '../../../assests/home/bg-remover/lottie/animation_lk0nr07v.json'; // Replace with the path to your downloaded Lottie animation file

function LoginPage() {
  return (
    <div>
      <h1>login page</h1>
      <LottieAnimation
        lottieRef={(ref) => ref && ref.setSpeed(0.5)} // Optional: Adjust animation speed
        animationData={animationData}
        loop={true}
        autoplay={true}
      />
    </div>
  );
}

export default LoginPage;



import React from 'react';
import { Helmet } from 'react-helmet';
import { FaUser, FaSearch, FaLink } from 'react-icons/fa';
import { useLocation } from 'react-router-dom';
import WebBanner from '../items/home/WebBanner';
import Newmember from '../items/home/Newmember';
import ContactForm from '../items/home/ContactForm';
import SucessStories from '../items/home/SucessStories';

const Homepage = () => {
  const location = useLocation();
  const isHomePage = location.pathname === '/';

  return (
    <div>
      <Helmet>
        {isHomePage && (
          <script type="text/javascript">
            {`
              var Tawk_API=Tawk_API||{}, Tawk_LoadStart=new Date();
              (function(){
                var s1=document.createElement("script"),s0=document.getElementsByTagName("script")[0];
                s1.async=true;
                s1.src='https://embed.tawk.to/64b18508cc26a871b0287207/1h5amvajm';
                s1.charset='UTF-8';
                s1.setAttribute('crossorigin','*');
                s0.parentNode.insertBefore(s1,s0);
              })();
            `}
          </script>
        )}
      </Helmet>

      <div>
        <WebBanner />
        {/* padding 150px section start*****/}
        <div className="bg-green-400 mx-20">
          <div className="container mx-auto  border-solid border-2 border-gray-800">
            <div className="bg-blue-400 h-597 min-w-full">
              <div className="flex pl-4 pr-4 flex-col items-center justify-center">
                <h2 className="text-gold text-4xl m-2">How It Works</h2>
                <h1 className="text-6xl m-1">Find Your Partner In Just a Few Steps</h1>
                <p className="text-2xl mt-4">
                  JaffnaMarriage will help you find your perfect match with just a few steps. You focus on what is most important to you, we do all the work.
                </p>
              </div>
            </div>
            {/* s2 div-sub: */}
            <div className="bg-white h-597 min-w-full flex flex-col items-center justify-center">
              <h2 className="text-3xl mb-4">Website Registration Process</h2>
              <div className="flex items-center">
                <div className="flex flex-col items-center">
                  <FaUser className="text-3xl mb-2" />
                  <span className="text-2xl font-bold">Registration</span>
                </div>
                <span className="text-gray-400 mx-4">➜</span>
                <div className="flex flex-col items-center">
                  <FaSearch className="text-3xl mb-2" />
                  <span className="text-2xl font-bold">Find Your Partner</span>
                </div>
                <span className="text-gray-400 mx-4">➜</span>
                <div className="flex flex-col items-center">
                  <FaLink className="text-3xl mb-2" />
                  <span className="text-2xl font-bold">Connect with Your Partner</span>
                </div>
              </div>
            </div>
            {/* s3 div */}
            <Newmember />
            {/* get started contact form */}
            <ContactForm />
            {/* success stories */}
            <SucessStories />
            <Newmember />
          </div>
        </div>
        {/* padding 150px section end*****/}
        <div className="bg-white">
          <div className="container mx-auto px-150">
            {/* footer section */}
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1440 320">
              <path
                fill="#273036"
                fillOpacity="1"
                d="M0,128L80,106.7C160,85,320,43,480,58.7C640,75,800,149,960,165.3C1120,181,1280,139,1360,117.3L1440,96L1440,320L1360,320C1280,320,1120,320,960,320C800,320,640,320,480,320C320,320,160,320,80,320L0,320Z"
              ></path>
            </svg>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Homepage;


<LottieAnimation
        lottieRef={(ref) => ref && ref.setSpeed(0.5)}
        animationData={animationData}
        loop={true}
        autoplay={true}
      />


      ////////////////////////


      import { useState } from 'react';
import RUserInfo from './RUserInfo';
import TermsCon from './TermsCon';
import Subscription from './Subscription';

function RegProcesswrap() {
  const [step, setStep] = useState(1);
  const [values, setValues] = useState({
    firstName: '',
    lastName: '',
    cardNumber: '',
    cardExpiry: ''
  });

  const handleChange = (input) => (e) => {
    setValues({ ...values, [input]: e.target.value });
  };

  const nextStep = () => {
    setStep(step + 1);
  };

  const prevStep = () => {
    setStep(step - 1);
  };

  const handleSubmit = () => {
    // Handle form submission logic
  };

  const getStepStatus = (currentStep) => {
    if (currentStep < step) {
      return 'completed';
    } else if (currentStep === step) {
      return 'active';
    } else {
      return 'inactive';
    }
  };

  return (
    <div className="flex justify-center items-center min-h-screen bg-gradient-to-r from-gray-900 via-gray-800 to-gray-900">
      <div className="w-11/12 md:w-847 h-11/12 md:h-647 bg-white rounded-lg shadow-xl">
        <div className="p-6">
          <div className="flex justify-between items-center mt-4 ">
            <div className="flex items-center">
              <div
                className={`rounded-full h-8 w-8 flex items-center justify-center text-white ${
                  getStepStatus(1) === 'completed' ? 'bg-green-500' : 'bg-blue-500'
                }`}
              >
                {getStepStatus(1) === 'completed' ? (
                  <span className="text-white">✓</span>
                ) : (
                  <span className="text-white">{1}</span>
                )}
              </div>
              <div
                className={`h-2 w-32 ${
                  getStepStatus(1) === 'completed' ? 'bg-green-500' : 'bg-blue-500'
                }`}
              ></div>
            </div>
            <div className="flex items-center">
              <div
                className={`rounded-full h-8 w-8 flex items-center justify-center text-white ${
                  getStepStatus(2) === 'completed' ? 'bg-green-500' : 'bg-blue-500'
                }`}
              >
                {getStepStatus(2) === 'completed' ? (
                  <span className="text-white">✓</span>
                ) : (
                  <span className="text-white">{2}</span>
                )}
              </div>
              <div
                className={`h-2 w-32 ${
                  getStepStatus(2) === 'completed' ? 'bg-green-500' : 'bg-blue-500'
                }`}
              ></div>
            </div>
            <div className="flex items-center">
              <div
                className={`rounded-full h-8 w-8 flex items-center justify-center text-white ${
                  getStepStatus(3) === 'completed' ? 'bg-green-500' : 'bg-blue-500'
                }`}
              >
                {getStepStatus(3) === 'completed' ? (
                  <span className="text-white">✓</span>
                ) : (
                  <span className="text-white">{3}</span>
                )}
              </div>
            </div>
          </div>
        </div>

        <div className="p-6">
          {step === 1 && (
            <RUserInfo nextStep={nextStep} handleChange={handleChange} values={values} />
          )}
          {step === 2 && (
            <TermsCon
              nextStep={nextStep}
              prevStep={prevStep}
              handleChange={handleChange}
              values={values}
            />
          )}
          {step === 3 && (
            <Subscription prevStep={prevStep} handleSubmit={handleSubmit} values={values} />
          )}
        </div>

        <div className="flex justify-between p-6">
          {step !== 1 && (
            <button
              className="bg-gray-500 text-white py-2 px-4 rounded"
              onClick={prevStep}
            >
              Previous
            </button>
          )}
          {step !== 3 ? (
            <button
              className="bg-blue-500 text-white py-2 px-4 rounded"
              onClick={nextStep}
            >
              Next
            </button>
          ) : (
            <button
              className="bg-green-500 text-white py-2 px-4 rounded"
              onClick={handleSubmit}
            >
              Submit
            </button>
          )}
        </div>
      </div>
    </div>
  );
}

export default RegProcesswrap;
/////////////////////////

import { useState } from 'react';
import RUserInfo from './RUserInfo';
import TermsCon from './TermsCon';
import Subscription from './Subscription';

function RegProcesswrap() {
  const [step, setStep] = useState(1);
  const [values, setValues] = useState({
    firstName: '',
    lastName: '',
    cardNumber: '',
    cardExpiry: ''
  });

  const handleChange = (input) => (e) => {
    setValues({ ...values, [input]: e.target.value });
  };

  const nextStep = () => {
    setStep(step + 1);
  };

  const prevStep = () => {
    setStep(step - 1);
  };

  const handleSubmit = () => {
    // Handle form submission logic
  };

  const getStepStatus = (currentStep) => {
    if (currentStep < step) {
      return 'completed';
    } else if (currentStep === step) {
      return 'active';
    } else {
      return 'inactive';
    }
  };

  return (
    <div className="flex justify-center items-center min-h-screen bg-gradient-to-r from-gray-900 via-gray-800 to-gray-900">
      <div className="w-11/12 md:w-847 h-11/12 md:h-647 bg-white rounded-lg shadow-xl">
        <div className="p-6 ">
          <div className="flex items-center justify-center ">
            <div className="flex items-center">
              <div
                className={`rounded-full h-8 w-8 flex items-center justify-center text-white ${
                  getStepStatus(1) === 'completed' ? 'bg-green-500' : 'bg-blue-500'
                }`}
              >
                {getStepStatus(1) === 'completed' ? (
                  <span className="text-white">✓</span>
                ) : (
                  <span className="text-white">{1}</span>
                )}
              </div>
              <div
                className={`h-2 w-32 ${
                  getStepStatus(1) === 'completed' ? 'bg-green-500' : 'bg-blue-500'
                }`}
              ></div>
            </div>
            <div className="flex items-center">
              <div
                className={`rounded-full h-8 w-8 flex items-center justify-center text-white ${
                  getStepStatus(2) === 'completed' ? 'bg-green-500' : 'bg-blue-500'
                }`}
              >
                {getStepStatus(2) === 'completed' ? (
                  <span className="text-white">✓</span>
                ) : (
                  <span className="text-white">{2}</span>
                )}
              </div>
              <div
                className={`h-2 w-32 ${
                  getStepStatus(2) === 'completed' ? 'bg-green-500' : 'bg-blue-500'
                }`}
              ></div>
            </div>
            <div className="flex items-center">
              <div
                className={`rounded-full h-8 w-8 flex items-center justify-center text-white ${
                  getStepStatus(3) === 'completed' ? 'bg-green-500' : 'bg-blue-500'
                }`}
              >
                {getStepStatus(3) === 'completed' ? (
                  <span className="text-white">✓</span>
                ) : (
                  <span className="text-white">{3}</span>
                )}
              </div>
            </div>
          </div>
        </div>

        <div className="p-6">
          {step === 1 && (
            <RUserInfo nextStep={nextStep} handleChange={handleChange} values={values} />
          )}
          {step === 2 && (
            <TermsCon
              nextStep={nextStep}
              prevStep={prevStep}
              handleChange={handleChange}
              values={values}
            />
          )}
          {step === 3 && (
            <Subscription prevStep={prevStep} handleSubmit={handleSubmit} values={values} />
          )}
        </div>

        <div className="flex justify-between p-6">
          {step !== 1 && (
            <button
              className="bg-gray-500 text-white py-2 px-4 rounded"
              onClick={prevStep}
            >
              Previous
            </button>
          )}
          {step !== 3 ? (
            <button
              className="bg-blue-500 text-white py-2 px-4 rounded"
              onClick={nextStep}
            >
              Next
            </button>
          ) : (
            <button
              className="bg-green-500 text-white py-2 px-4 rounded"
              onClick={handleSubmit}
            >
              Submit
            </button>
          )}
        </div>
      </div>
    </div>
  );
}

export default RegProcesswrap;
